<?php

namespace UUP\Web\Component\Collection;

require_once('CollectionWrapper.php');

/**
 * Generated by PHPUnit_SkeletonGenerator on 2017-09-28 at 12:44:31.
 */
class CollectionTest extends \PHPUnit_Framework_TestCase
{

        /**
         * @var Collection
         */
        protected $object;

        /**
         * Sets up the fixture, for example, opens a network connection.
         * This method is called before a test is executed.
         */
        protected function setUp()
        {
                $this->object = new CollectionWrapper();
        }

        /**
         * Tears down the fixture, for example, closes a network connection.
         * This method is called after a test is executed.
         */
        protected function tearDown()
        {
                
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::__set
         * @todo   Implement test__set().
         */
        public function test__set()
        {
                $expect = 'value1';
                $this->object->name1 = $expect;
                $actual = $this->object->data('name1');

                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::__get
         * @todo   Implement test__get().
         */
        public function test__get()
        {
                $expect = 'value1';
                $this->object->set('name1', $expect);
                $actual = $this->object->name1;

                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::__toString
         * @todo   Implement test__toString().
         */
        public function test__toString()
        {
                $expect = 'name1=value1 name2=value2';
                $this->object->set('name1', 'value1');
                $this->object->set('name2', 'value2');
                $actual = (string) $this->object;

                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::add
         * @todo   Implement testAdd().
         */
        public function testAdd()
        {
                // 
                // Create new key:
                // 
                $expect = 'value1';
                $this->object->add('name1', 'value1');
                $actual = $this->object->data('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                // 
                // Append to existing key:
                // 
                $expect = 'value1 value2';
                $this->object->add('name1', 'value2');
                $actual = $this->object->data('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::set
         * @todo   Implement testSet().
         */
        public function testSet()
        {
                // 
                // Create new key:
                // 
                $expect = 'value1';
                $this->object->set('name1', 'value1');
                $actual = $this->object->data('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                // 
                // Replace existing key value:
                // 
                $expect = 'value2';
                $this->object->set('name1', 'value2');
                $actual = $this->object->data('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::get
         * @todo   Implement testGet().
         */
        public function testGet()
        {
                $expect = 'value1';
                $this->object->set('name1', 'value1');
                $actual = $this->object->get('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::remove
         * @todo   Implement testRemove().
         */
        public function testRemove()
        {
                $expect = 'value1';
                $this->object->set('name1', 'value1');
                $actual = $this->object->get('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = false;
                $this->object->remove('name1');
                $actual = $this->object->get('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::exist
         * @todo   Implement testExist().
         */
        public function testExist()
        {
                $expect = true;
                $this->object->set('name1', 'value1');
                $actual = $this->object->exist('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = false;
                $this->object->remove('name1');
                $actual = $this->object->exist('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::find
         * @todo   Implement testFind().
         */
        public function testFind()
        {
                $expect = false;
                $actual = $this->object->find('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 'value1';
                $this->object->set('name1', 'value1');
                $actual = $this->object->find('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = false;
                $this->object->remove('name1');
                $actual = $this->object->find('name1');
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::join
         * @todo   Implement testJoin().
         */
        public function testJoin()
        {
                $expect = 'name1=value1 name2=value2';
                $this->object->set('name1', 'value1');
                $this->object->set('name2', 'value2');
                $actual = $this->object->join();

                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::count
         * @todo   Implement testCount().
         */
        public function testCount()
        {
                $expect = 0;
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 1;
                $this->object->set('name1', 'value1');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 1;
                $this->object->set('name1', 'value2');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 1;
                $this->object->add('name1', 'value3');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 2;
                $this->object->add('name2', 'value1');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

        /**
         * @covers UUP\Web\Component\Collection\Collection::clear
         * @todo   Implement testClear().
         */
        public function testClear()
        {
                $expect = 1;
                $this->object->set('name1', 'value1');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $expect = 2;
                $this->object->add('name2', 'value1');
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
                
                $this->object->clear();
                $expect = 0;
                $actual = $this->object->count();
                self::assertNotNull($actual);
                self::assertEquals($actual, $expect);
        }

}
